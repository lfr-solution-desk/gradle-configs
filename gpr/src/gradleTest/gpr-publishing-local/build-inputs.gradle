// customize all supported inputs
project.ext['liferay.gpr.publishing.repo.owner' ] = 'owner-AAA'
project.ext['liferay.gpr.publishing.repo.name' ] = 'repo-BBB'

project.ext['liferay.gpr.publishing.type' ] = 'RELEASE'

project.ext['liferay.gpr.publishing.groupid' ] = 'com.example.nnn.xxx'
project.ext['liferay.gpr.publishing.version.source' ] = 'GRADLE_PROJECT'
project.ext['liferay.gpr.publishing.sources.published' ] = 'false'
project.ext['liferay.gpr.publishing.javadoc.published' ] = 'false'

// since the publishing version will be per-project, set some default for them
allprojects {
    version = '1.2.0'
}

// Apply the plugin - a local script file
subprojects {
    if (!childProjects) {
        project.ext['liferay.gpr.publishing.artifactid' ] = "com2.example2.nnn2.${project.name}"

        apply from: "${findProperty('tested.gradle.scripts.local.src.dir')}/gpr-publishing.gradle"
    }
}


task runGradleTest {
    dependsOn clean

    doLast {
        assert project.file('modules/forms/form-api/build/publications/nebula/pom-default.xml').isFile()

        // all defaults, no version set anywhere
        new XmlSlurper().parseText(project.file('modules/forms/form-api/build/publications/nebula/pom-default.xml').text).with {project ->
            assert project.groupId == 'com.example.nnn.xxx'
            assert project.artifactId == 'com2.example2.nnn2.form-api'
            assert project.version == '1.2.0'

            assert project.scm.connection == 'scm:git:https://github.com/owner-AAA/repo-BBB.git'
        }

        // version set in bnd.bnd only
        assert project.file('modules/forms/form-api-2/build/publications/nebula/pom-default.xml').isFile()

        new XmlSlurper().parseText(project.file('modules/forms/form-api-2/build/publications/nebula/pom-default.xml').text).with {project ->
            assert project.groupId == 'com.example.nnn.xxx'
            assert project.artifactId == 'com2.example2.nnn2.form-api-2'
            assert project.version == '1.0.2'
        }

        // version set in bnd.bnd AND build.gradle
        assert project.file('modules/forms/form-api-3/build/publications/nebula/pom-default.xml').isFile()

        new XmlSlurper().parseText(project.file('modules/forms/form-api-3/build/publications/nebula/pom-default.xml').text).with {project ->
            assert project.groupId == 'com.example.nnn.xxx'
            assert project.artifactId == 'com2.example2.nnn2.form-api-3'
            assert project.version == '2.1.2'
        }

        // version set in bnd.bnd + build.gradle + changed via build.gradle -> pom {}
        assert project.file('modules/forms/form-api-4/build/publications/nebula/pom-default.xml').isFile()

        new XmlSlurper().parseText(project.file('modules/forms/form-api-4/build/publications/nebula/pom-default.xml').text).with {project ->
            assert project.groupId == 'XXX'
            assert project.artifactId == 'YYY'
            assert project.version == '3.2.3'
        }

        // check the target Maven repo was set up as expected
        project(':modules:forms:form-api').with {
            publishing.repositories.getByName('GitHubPackages').with { ArtifactRepository ar ->
                assert ar.url.toString() == 'https://maven.pkg.github.com/owner-AAA/repo-BBB'
                assert ar.credentials.username == findProperty('liferay.gpr.publishing.actor')
                assert ar.credentials.password == findProperty('liferay.gpr.publishing.token')
            }
        }

        // POM-only module
        assert project.file('modules/forms/pom-all/build/publications/nebula/pom-default.xml').isFile()

        new XmlSlurper().parseText(project.file('modules/forms/pom-all/build/publications/nebula/pom-default.xml').text).with {project ->
            assert project.groupId == 'com.example.nnn.xxx'
            assert project.artifactId == 'com2.example2.nnn2.pom-all'
            assert project.version == '1.2.0'
            assert project.packaging == 'pom'

            assert project.scm.connection == 'scm:git:https://github.com/owner-AAA/repo-BBB.git'

            // siblings of the POM modules are dependencies
            assert project.dependencies.dependency.size()  == 4
            assert project.dependencies.dependency[0].groupId == 'com.example.nnn.xxx'
            assert project.dependencies.dependency[0].artifactId == 'com2.example2.nnn2.form-api'
            assert project.dependencies.dependency[0].version == '1.2.0'
            assert project.dependencies.dependency[0].scope == 'runtime'

            assert project.dependencies.dependency[1].groupId == 'com.example.nnn.xxx'
            assert project.dependencies.dependency[1].artifactId == 'com2.example2.nnn2.form-api-2'
            assert project.dependencies.dependency[1].version == '1.0.2'
            assert project.dependencies.dependency[1].scope == 'runtime'

            assert project.dependencies.dependency[2].groupId == 'com.example.nnn.xxx'
            assert project.dependencies.dependency[2].artifactId == 'com2.example2.nnn2.form-api-3'
            assert project.dependencies.dependency[2].version == '2.1.2'
            assert project.dependencies.dependency[2].scope == 'runtime'

            assert project.dependencies.dependency[3].groupId == 'XXX'
            assert project.dependencies.dependency[3].artifactId == 'YYY'
            assert project.dependencies.dependency[3].version == '3.2.3'
            assert project.dependencies.dependency[3].scope == 'runtime'
        }

        // THEMES
        //        assert project.file('themes/jarvis-theme/dist/jarvis-theme.war').isFile()
        assert project.file('themes/jarvis-theme/build_gradle/publications/nebula/pom-default.xml').isFile()

        new XmlSlurper().parseText(project.file('themes/jarvis-theme/build_gradle/publications/nebula/pom-default.xml').text).with {project ->
            assert project.groupId == 'com.example.nnn.xxx'
            assert project.artifactId == 'com2.example2.nnn2.jarvis-theme'
            assert project.version == '1.0.0'
            assert project.packaging == 'war'
        }

        // check the target Maven repo was set up as expected
        project(':themes:jarvis-theme').with {
            publishing.repositories.getByName('GitHubPackages').with { ArtifactRepository ar ->
                assert ar.url.toString() == 'https://maven.pkg.github.com/owner-AAA/repo-BBB'
                assert ar.credentials.username == findProperty('liferay.gpr.publishing.actor')
                assert ar.credentials.password == findProperty('liferay.gpr.publishing.token')
            }
        }

        // WARS

        // TODO
    }
}

allprojects {
    afterEvaluate {
        // The publishing tasks are only added once the individual modules are configured, based on their types

        [ 'generatePomFileForNebulaPublication',  ].each {
            def taskToTest = tasks.findByName(it)
            if (taskToTest) {
                runGradleTest.dependsOn taskToTest
            }
        }
    }
}