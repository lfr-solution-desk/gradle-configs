project.ext['liferay.gpr.consuming.repos.names'] = 'static-repo-1, static-repo-2, f-another-static-feature-repo'

// customize the prefix to test out we can use another
project.ext['liferay.gpr.consuming.repos.inferring.dependency.groupid.prefix'] = 'com.example.aaa.'

project.ext['liferay.gpr.consuming.actor'] = 'some_user'
project.ext['liferay.gpr.consuming.token'] = 'iuwerj2@$%adfaf44'


// traditional
dependencies {
    compileOnly group: 'com.example.aaa.f-root-feature-repo',           name: 'some-artifact', version: '1.0.3'
    compileOnly group: 'com.example.aaa.f-another-static-feature-repo', name: 'some-artifact', version: '1.0.3'
}

// strange, but also possible
afterEvaluate {
    dependencies {
        compileOnly group: 'com.example.aaa.f-yet-another-root-feature-repo', name: 'some-artifact-2', version: '1.0.4'
    }
}

configure(project(':modules:forms:form-api')) {
    afterEvaluate {
        dependencies {
            compileOnly group: 'com.example.aaa.f-another-module-feature-repo', name: 'some-artifact', version: '1.0.6'
        }
    }
}

// NOTE: If you need to declare dependencies in any 'afterEvaluate' block, make sure to apply the gpr-consuming.gradle only
// _after_ they are added, otherwise the repos of the dependencies won't be detected (gpr-consuming uses afterEvaluate as well)

// Apply the plugin - a local script file
apply from: "${findProperty('tested.gradle.scripts.local.src.dir')}/gpr-consuming.gradle"


task runGradleTest {
    dependsOn assemble

    doLast {
        println rootProject.repositories.collect { it.name }

        // test url + creds are set correctly
        rootProject.repositories.getByName('GitHub Packages - lfr-solution-desk/static-repo-1').with { ArtifactRepository ar ->
            assert ar.url.toString() == 'https://maven.pkg.github.com/lfr-solution-desk/static-repo-1'
            assert ar.credentials.username == 'some_user'
            assert ar.credentials.password == 'iuwerj2@$%adfaf44'
        }

        // static
        assert rootProject.repositories.getByName('GitHub Packages - lfr-solution-desk/static-repo-1')
        assert rootProject.repositories.getByName('GitHub Packages - lfr-solution-desk/static-repo-2')
        assert rootProject.repositories.getByName('GitHub Packages - lfr-solution-desk/f-another-static-feature-repo')

        // detected based on this root's module build.gradle
        assert rootProject.repositories.getByName('GitHub Packages - lfr-solution-desk/f-root-feature-repo')
        assert rootProject.repositories.getByName('GitHub Packages - lfr-solution-desk/f-another-static-feature-repo')
        assert rootProject.repositories.getByName('GitHub Packages - lfr-solution-desk/f-yet-another-root-feature-repo')

        project(':modules:forms:form-api').with { module ->
            // static
            assert module.repositories.getByName('GitHub Packages - lfr-solution-desk/static-repo-1')
            assert module.repositories.getByName('GitHub Packages - lfr-solution-desk/static-repo-2')
            assert module.repositories.getByName('GitHub Packages - lfr-solution-desk/f-another-static-feature-repo')

            // detected based on declarations in build.gradle of the module + the afterEvaluate in root
            assert module.repositories.getByName('GitHub Packages - lfr-solution-desk/f-module-feature-repo')
            assert module.repositories.getByName('GitHub Packages - lfr-solution-desk/f-another-module-feature-repo')
        }
    }
}