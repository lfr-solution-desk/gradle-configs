##
## GPR Publishing
##

    # The name of the repository on GitHub where the project's artifacts are published as Maven Packages;
    # assume all Solution Desk projects live in 'lfr-solution-desk' (owner) and
    # the repo named exactly as the same of the root project in Gradle (see settings.gradle
    # of the project).
    #
    #liferay.gpr.publishing.repo.owner=lfr-solution-desk
    #liferay.gpr.publishing.repo.name=

    # If set to 'SNAPSHOT', the published version of all modules (as taken from Gradle, not from e.g. bnd.bnd)
    # are updated (before being written into pom.xml), to end with '-SNAPSHOT':
    #  - if version ends with -SNAPSHOT => keep as is
    #  - if version is anything else => append -SNAPSHOT
    # If set to 'RELEASE':
    # - all dependencies are forced to be "final" (non-SNAPSHOT) (build is failed if not satisfied)
    # - all versions are forced to be non-SNAPSHOT (build is failed if not satisfied)
    # - artifact cannot be already published (publishing would fail)
    #
    #liferay.gpr.publishing.type=RELEASE

    # The templates to be used when determining Maven "groupId" and "artifactId" of a single module and
    # creating pom.xml for its publication. Following variables are supported in these two templates:
    #   * ${rootProjectName} ~ rootProject.name
    #       * f-liferay-forms-framework
    #   * ${projectGroup} ~ project.group
    #       * path in the Gradle project from root, including the root project's name
    #       * f-liferay-forms-framework.modules.form
    #   * ${projectName} ~ project.name
    #       * the name of the module as a Gradle project
    #       * form-api
    #
    # If you want to have a different template for a subset of modules (e.g. "themes"),
    # you can customize the 'nebula' publication of each project. For example:
    #   // /themes/build.gradle
    #   subprojects { Project subproject ->
    #       subproject.publishing.publications.nebula(MavenPublication) { MavenPublication mp ->
    #           mp.groupId "custom.group.name"
    #           mp.artifactId subproject.name
    #       }
    #   }
    #

    #liferay.gpr.publishing.groupid.template=com.liferay.soldesk.${rootProjectName}
    #liferay.gpr.publishing.artifactid.template=${projectName}

    # The source of the published version for each module. If set to GRADLE_ROOT_PROJECT (default),
    # it's taken from the root project in Gradle in Liferay Workspace, so all published modules should
    # have the same version (in terms of publishing Maven artifacts for each module).
    #
    # If set to GRADLE_PROJECT, the version will be read from project's (module's) version
    # in Gradle. This may be set in various ways, for example by parent Gradle project, build.gradle
    # of the project, some plugin applied to the project (e.g. for OSGi, use the version in bnd.bnd)
    # etc. It's not recommended to use this setting for typical Liferay Workspace.
    #
    # Note: When using liferay.gpr.publishing.type=SNAPSHOT, then '-SNAPSHOT' will be appended as well.
    #
    #liferay.gpr.publishing.version.source=GRADLE_ROOT_PROJECT

    # When set to 'true', the -javadoc and -sources artifacts will be published as well.
    #
    # NOTE: Due to GitHub Packages limitation, neither -sources not -javadoc is published
    #       for -SNAPSHOT artifacts. For details, please see:
    #       https://github.community/t5/GitHub-API-Development-and/Github-Package-snapshot-build-number-not-updating/m-p/55177/highlight/true#M4672
    #
    #liferay.gpr.publishing.sources.published=true
    #liferay.gpr.publishing.javadoc.published=true

    # The authentication credentials to publish the artifacts.
    # Since these are sensitive properties, it's recommended to pass them to the build
    # (if needed) using an init script or set them up in your local '${USER_HOME}/.gradle'.
    #
    # The correct values are:
    #   * actor = your github.com username
    #   * token = Personal access token on github.com for you username, with the "packages:write" permission granted.
    #
    #liferay.gpr.publishing.actor=
    #liferay.gpr.publishing.token=

    # Extension (defined for each subproject) to configure how it gets published, registered as 'project.gpr':
    #class GprExtension {
    #    // The desired custom identity, if it should be different from the 'liferay.gpr.publishing.*' templates
    #    String groupId
    #    String artifactId
    #
    #    // what gets published, if custom
    #    boolean publishSources
    #    boolean publishJavadoc
    #}

##
## GPR Consuming
##

    # The location on GitHub where the projects' sources reside and are published as Packages;
    # assume all Solution Desk projects live in 'lfr-solution-desk' (owner) and
    # the repo named exactly as the same of the root project in Gradle (see settings.gradle)
    # from where published.
    #
    #liferay.gpr.consuming.repos.owner=lfr-solution-desk

    # If set to 'true', the needed repositories to fetch the dependencies will be inferred
    # from the 'groupId' the (direct) dependencies set on the modules.
    #
    #liferay.gpr.consuming.repos.inferring.enabled=true

    #liferay.gpr.consuming.repos.inferring.dependency.groupid.prefix=com.liferay.soldesk.

    # Comma-separated list of repositories, owned by ${liferay.gpr.consuming.repos.owner},
    # which should be set up as Maven repositories to fetch dependencies. This can be used
    # in the case where the inferring fails to notice some dependency or for example
    # for fetching transitive dependencies.
    #
    #liferay.gpr.consuming.repos.names=

    # The authentication credentials to fetch artifacts from configured (inferred or static)
    # repos. Since these are sensitive properties, it's recommended to pass them to the build
    # using an init script or set them up in yoru local '${USER_HOME}/.gradle'.
    # Alternatively, you can use JVM System properties GITHUB_ACTOR and GITHUB_TOKEN, passed
    # to the Gradle JVM using the -D arguments on command line.
    #
    # The correct values are:
    #   * actor = your github.com username
    #   * token = Personal access token on github.com for you username, with the "packages:read" permission granted.
    #
    #liferay.gpr.consuming.actor=
    #liferay.gpr.consuming.token=