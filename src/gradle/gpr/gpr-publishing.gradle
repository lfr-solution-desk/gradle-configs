// The minimal configuration to get all the Gradle modules publishes in GitHub Packages repository
// (as Maven artifacts), defaulting to using Solution Desk GitHub organization as the target of the packages.
// The to be applied from Liferay Workspace -> build.gradle

// For documentation of the input properties, see 'src/gradle/gpr/gradle.properties'

// TODO we could even probably deduce the repo's name from 'git' info (grgit plugin or something) if needed,
//  but I think it's fine to take this from Gradle
String githubRepoOwner = project.findProperty('liferay.gpr.publishing.repo.owner') ?: 'lfr-solution-desk'
String githubRepoName = project.findProperty('liferay.gpr.publishing.repo.name') ?: rootProject.name

String publicationType = project.findProperty('liferay.gpr.publishing.type') ?: 'RELEASE'
assert publicationType in [ 'RELEASE', 'SNAPSHOT' ], "Please use either RELEASE or SNAPSHOT for 'liferay.gpr.publishing.type'."

String groupIdTemplate = project.findProperty('liferay.gpr.publishing.groupid.template') ?: 'com.liferay.soldesk.${rootProjectName}'
String artifactIdTemplate = project.findProperty('liferay.gpr.publishing.artifactid.template') ?: '${projectName}'

def resolveTemplate = { String template, Project moduleProject ->
    def binding = [
            rootProjectName: moduleProject.rootProject.name,
            projectGroup   : moduleProject.group,
            projectName    : moduleProject.name
    ]
    return new groovy.text.SimpleTemplateEngine().createTemplate(template).make(binding).toString()
}

def resolveGroupIdTemplate = resolveTemplate.curry(groupIdTemplate)
def resolveArtifactIdTemplate = resolveTemplate.curry(artifactIdTemplate)

boolean publishSources = (project.findProperty('liferay.gpr.publishing.sources.published') ?: 'true').toString().toBoolean()
boolean publishJavadoc = (project.findProperty('liferay.gpr.publishing.javadoc.published') ?: 'true').toString().toBoolean()


gradle.taskGraph.whenReady { TaskExecutionGraph tg ->
    // Make the GPR auth properties mandatory, since credentials for GPR will always be required when publishing
    if(tg.allTasks.find { it.name == 'publishGprPublicationToGitHubPackagesRepository' }) {
        if(!findProperty('liferay.gpr.publishing.actor') || !findProperty('liferay.gpr.publishing.token')) {
            throw new InvalidUserDataException(
                    "The project properties with auth for GitHub Packages publishing ('liferay.gpr.publishing.actor' and " +
                            "'liferay.gpr.publishing.token') are required when publishing, but were not provided.")
        }
    }
}

logger.info """[gpr] githubRepoOwner= ${githubRepoOwner} | githubRepoName= ${githubRepoName} | publicationType= ${publicationType} | \
groupIdTemplate= ${groupIdTemplate} | artifactIdTemplate= ${artifactIdTemplate} | \
publishSources= ${publishSources} | publishJavadoc= ${publishJavadoc}"""

subprojects {
    // https://help.github.com/en/packages/using-github-packages-with-your-projects-ecosystem/configuring-gradle-for-use-with-github-packages
    // https://docs.gradle.org/5.6.4/userguide/publishing_maven.html#sec:publishing_custom_artifacts_to_maven

    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/${githubRepoOwner}/${githubRepoName}")
                credentials {
                    username project.findProperty('liferay.gpr.publishing.actor')
                    password project.findProperty('liferay.gpr.publishing.token')
                }
            }
        }
    }

    plugins.withType(JavaPlugin) {
        logger.info "[gpr] Java module detected for publishing: ${project} (${project.version})"

        task sourcesJar(type: Jar) {
            from sourceSets.main.allJava
            archiveClassifier = 'sources'
        }

        task javadocJar(type: Jar) {
            from javadoc
            archiveClassifier = 'javadoc'
        }

        publishing {
            publications {
                gpr(MavenPublication) {
                    groupId = resolveGroupIdTemplate(project)
                    artifactId = resolveArtifactIdTemplate(project)

                    from components.java

                    // workaround, where -sources or -javadoc is not supported when updating snapshots
                    // (prevents snapshot to be overwritten with next publication of the same SNAPSHOT version)
                    // see: https://github.community/t5/GitHub-API-Development-and/Github-Package-snapshot-build-number-not-updating/m-p/55177/highlight/true#M4672
                    if(publicationType == 'RELEASE') {
                        if (publishSources) {
                            artifact sourcesJar
                        }

                        if (publishJavadoc) {
                            artifact javadocJar
                        }
                    } else if (publicationType == 'SNAPSHOT') {
                        if (publishSources) {
                            logger.info "[gpr] The '-sources' artifact won't get published, since not supported for GitHup Packages repo for SNAPSHOT artifacts"
                        }

                        if (publishJavadoc) {
                            logger.info "[gpr] The '-javadoc' artifact won't get published, since not supported for GitHup Packages repo for SNAPSHOT artifacts"
                        }
                    }

                    pom {
                        description = project.description ?: "Artifact from '${project.path}' of '${githubRepoOwner}/${githubRepoName}'."

                        scm {
                            connection = "scm:git:https://github.com/${githubRepoOwner}/${githubRepoName}.git"
                            developerConnection = "scm:git:https://github.com/${githubRepoOwner}/${githubRepoName}.git"
                            url = "https://github.com/${githubRepoOwner}/${githubRepoName}"
                        }

                        // TODO anything else to customize?
                    }
                }
            }
        }

        tasks.findByName('publishGprPublicationToGitHubPackagesRepository').configure {
            dependsOn 'checkGprPublicationMetadata'
        }

        if(publicationType == 'SNAPSHOT') {
            // override the version used in pom.xml being published
            project.afterEvaluate {
                logger.info "[gpr] Overriding version of ${project} to be published as a -SNAPSHOT"

                publishing {
                    publications.getByName('gpr') { MavenPublication publication ->
                        pom {
                            if(!publication.version.endsWith('-SNAPSHOT')) {
                                version = "${publication.version}-SNAPSHOT"
                            }
                        }
                    }
                }
            }
        } else if(publicationType == 'RELEASE') {
            tasks.findByName('checkGprPublicationMetadata').configure {
                dependsOn 'checkNoSnapshotDependenciesUsed'
                dependsOn 'checkFinalVersionUsed'
            }
        }
    }

    // TODO add support for "themes" modules
    // TODO add support for "wars" modules

    tasks.register('checkNoSnapshotDependenciesUsed') {
        doLast {
            def dependenciesWithSnapshotVersionByConfiguration =
                    configurations.collectEntries() { Configuration c ->
                        [ c, c.allDependencies.findAll { Dependency  d -> (d.version ?: '').endsWith('-SNAPSHOT') } ]
                    }.findAll {
                        Configuration c, Set<Dependency> directDependenciesHavingSnapshotVersion ->
                            !directDependenciesHavingSnapshotVersion.isEmpty()
                    }

            if (!dependenciesWithSnapshotVersionByConfiguration.isEmpty()) {
                throw new PublishException(
                        "The module ${project} uses one or more -SNAPSHOT dependencies: ${dependenciesWithSnapshotVersionByConfiguration}")
            }
        }
    }

    tasks.register('checkFinalVersionUsed') {
        doLast {
            if (project.version.toString().endsWith('-SNAPSHOT')) {
                throw new PublishException("The version of ${project} is not final, please make sure there is no '-SNAPSHOT' suffix in the version.")
            }
        }
    }

    tasks.register('checkGprPublicationMetadata') {
        group "Publishing"
        description "Checks that all metadata is fine to do the "
    }

    // https://docs.gradle.org/5.6.4/userguide/signing_plugin.html#signing_plugin
    // TODO turn off for now, since signing would require a signing key to be present

//    signing {
//        sign publishing.publications.gpr
//    }
}