// invoke this test with some special arguments for the build
project.ext['liferay.gpr.publishing.type' ] = 'SNAPSHOT'
project.ext['liferay.gpr.publishing.version.source' ] = 'GRADLE_PROJECT'

// Apply the plugin - a local script file
apply from: "${findProperty('tested.gradle.scripts.local.src.dir')}/gpr/gpr-publishing.gradle"


task runGradleTest {
    dependsOn clean

    doLast {
        assert project.file('modules/forms/form-api/build/publications/nebula/pom-default.xml').isFile()

        // all defaults, no version set anywhere
        project.file('modules/forms/form-api/build/publications/nebula/pom-default.xml').text.with {
            assert it.contains('<groupId>com.liferay.soldesk.f-gpr-publishing-repo</groupId>')
            assert it.contains('<artifactId>com.liferay.soldesk.f-gpr-publishing-repo.form-api</artifactId>')
            assert it.contains('<version>1.2.0-SNAPSHOT</version>')
        }

        // version set in bnd.bnd only
        assert project.file('modules/forms/form-api-2/build/publications/nebula/pom-default.xml').isFile()

        project.file('modules/forms/form-api-2/build/publications/nebula/pom-default.xml').text.with {
            assert it.contains('<groupId>com.liferay.soldesk.f-gpr-publishing-repo</groupId>')
            assert it.contains('<artifactId>com.liferay.soldesk.f-gpr-publishing-repo.form-api-2</artifactId>')
            assert it.contains('<version>1.0.2-SNAPSHOT</version>')
        }

        // version set in bnd.bnd AND build.gradle
        assert project.file('modules/forms/form-api-3/build/publications/nebula/pom-default.xml').isFile()

        project.file('modules/forms/form-api-3/build/publications/nebula/pom-default.xml').text.with {
            assert it.contains('<groupId>com.liferay.soldesk.f-gpr-publishing-repo</groupId>')
            assert it.contains('<artifactId>com.liferay.soldesk.f-gpr-publishing-repo.form-api-3</artifactId>')
            assert it.contains('<version>2.1.2-SNAPSHOT</version>')
        }

        // version set in bnd.bnd + build.gradle + changed via build.gradle -> pom {}
        assert project.file('modules/forms/form-api-4/build/publications/nebula/pom-default.xml').isFile()

        project.file('modules/forms/form-api-4/build/publications/nebula/pom-default.xml').text.with {
            assert it.contains('<groupId>XXX</groupId>')
            assert it.contains('<artifactId>YYY</artifactId>')
            assert it.contains('<version>3.2.3-SNAPSHOT</version>')
        }

        // check the target Maven repo was set up as expected
        project(':modules:forms:form-api').with {
            publishing.repositories.getByName('GitHubPackages').with { ArtifactRepository ar ->
                assert ar.url.toString() == 'https://maven.pkg.github.com/lfr-solution-desk/f-gpr-publishing-repo'
                assert ar.credentials.username == findProperty('liferay.gpr.publishing.actor')
                assert ar.credentials.password == findProperty('liferay.gpr.publishing.token')
            }
        }

        // THEMES
//        assert project.file('themes/jarvis-theme/dist/jarvis-theme.war').isFile()
        assert project.file('themes/jarvis-theme/build_gradle/publications/nebula/pom-default.xml').isFile()

        project.file('themes/jarvis-theme/build_gradle/publications/nebula/pom-default.xml').text.with {
            assert it.contains('<groupId>com.liferay.soldesk.f-gpr-publishing-repo</groupId>')
            assert it.contains('<artifactId>com.liferay.soldesk.f-gpr-publishing-repo.jarvis-theme</artifactId>')
            assert it.contains('<version>1.0.0-SNAPSHOT</version>')
            assert it.contains('<packaging>war</packaging>')

            assert it.contains('lfr-solution-desk/f-gpr-publishing-repo')
        }

        // check the target Maven repo was set up as expected
        project(':themes:jarvis-theme').with {
            publishing.repositories.getByName('GitHubPackages').with { ArtifactRepository ar ->
                assert ar.url.toString() == 'https://maven.pkg.github.com/lfr-solution-desk/f-gpr-publishing-repo'
                assert ar.credentials.username == findProperty('liferay.gpr.publishing.actor')
                assert ar.credentials.password == findProperty('liferay.gpr.publishing.token')
            }
        }

        // WARS

        // TODO
    }
}

allprojects {
    afterEvaluate {
        // The publishing tasks are only added once the individual modules are configured, based on their types

        [ 'generatePomFileForNebulaPublication',  ].each {
            def taskToTest = tasks.findByName(it)
            if (taskToTest) {
                runGradleTest.dependsOn taskToTest
            }
        }
    }
}