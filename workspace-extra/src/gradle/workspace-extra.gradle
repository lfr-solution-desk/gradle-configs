// This config adds some nice features missing in the Liferay Workspace plugin

assert project == project.rootProject, "This config can only be applied on the root project"

// TODO make a better check of gradle version
//  import org.gradle.util.VersionNumber
//  VersionNumber versionNumber = VersionNumber.parse(gradle.getGradleVersion());

def supportedGradleVersions = [ '5.']
assert supportedGradleVersions.find { gradle.gradleVersion.startsWith(it) },
        "This config is only supported in following Gradle versions: ${supportedGradleVersions}"

// Make sure users can use gradle-local.properties to pass their GitHub auth, same way as they can
// use the file to set up their Liferay Workspace plugin (applied in settings.properties)
buildscript {
    repositories { mavenCentral() }
    dependencies { classpath group: "net.saliman", name: "gradle-properties-plugin", version: "1.4.6" }
}
apply plugin: net.saliman.gradle.plugin.properties.PropertiesPlugin


// Make sure we can use the classes from the Download plugin, like the Verify below
buildscript {
    repositories { jcenter() }
    dependencies { classpath group: "de.undercouch", name: "gradle-download-task", version: "4.0.4" }
}
apply plugin: de.undercouch.gradle.tasks.download.DownloadTaskPlugin

[
        'SHA-256': 'liferay.workspace.bundle.checksum[sha-256]',
        'MD5':     'liferay.workspace.bundle.checksum[md5]',
].each { checksumAlgorithm, expectedSumPropName ->
    // Verify checksum using given algorithm, but only if the project property
    // with the expected checksum was provided
    def expectedSum = findProperty(expectedSumPropName)

    if (expectedSum) {
        def bundleFileName = gradle.liferayWorkspace.bundleUrl.substring(gradle.liferayWorkspace.bundleUrl.lastIndexOf('/') + 1)

        def verifyBundle = tasks.register("verifyBundle${checksumAlgorithm}", Verify) {
            src new File(gradle.liferayWorkspace.bundleCacheDir, bundleFileName)
            algorithm checksumAlgorithm
            checksum expectedSum

            doFirst {
                logger.info "[workspace-extra] Verifying checksum of the used bundle file '${src}', as found in the bundleCacheDir"
            }
        }

        tasks.findByName('downloadBundle').configure {
            finalizedBy verifyBundle
        }
    }
}


// A sanity check in case the Tomcat version inside the used bundle changes and
// we miss to update the version in 'configs/*/tomcat-NNN'
// Based on: https://gist.github.com/sustacek/322318eb01fc9c5014efc0f7622b6062
[
        (initBundle): gradle.liferayWorkspace.homeDir,
        (distBundle): file("${buildDir}/dist")
].each {Task bundleProducingTask, File destDir ->
    def checkBundleTask = tasks.register("${bundleProducingTask.name}VerifyTomcatVersion") {
        onlyIf {
            // liferayWorkspace.appServerTomcatVersion was only added in some later (3.x)
            // version of the workspace plugin, so only run this task when the later version of Workspace
            // plugin is applied.
            // Also only run this check only if "appServerTomcatVersion" is known or "product" was defined
            // (and supplied the Tomcat version)
            !bundleProducingTask.state.failure &&
                    gradle.liferayWorkspace.hasProperty('appServerTomcatVersion') &&
                    (gradle.liferayWorkspace.appServerTomcatVersion ||
                            (gradle.liferayWorkspace.hasProperty('product') && gradle.liferayWorkspace.product))
        }

        doLast {
            assert gradle.liferayWorkspace.appServerTomcatVersion,
                    "'gradle.liferayWorkspace.appServerTomcatVersion' should never be empty when using 'liferay.workspace.product'. " +
                    "You may need to configure 'liferay.workspace.app.server.tomcat.version' manually. " +
                    "Or exclude this task from running (`./gradlew -x ${name} ...`)"

            logger.info "[workspace-extra] Checking Tomcat files in '${destDir}'"

            def tomcatDirNameMatchingBundle = "tomcat-" + gradle.liferayWorkspace.appServerTomcatVersion

            def offendingTomcatFiles =
                    fileTree(destDir)
                            .include("tomcat-*/**")
                            .exclude("${tomcatDirNameMatchingBundle}/**")

            if (!offendingTomcatFiles.isEmpty()) {
                throw new GradleException(
                        "Some of the files copied from '${relativePath(gradle.liferayWorkspace.configsDir)}' have a wrong " +
                                "Tomcat version. Make sure to place Tomcat files only inside '${tomcatDirNameMatchingBundle}'" +
                                " to be matching the Tomcat dir in the configured bundle.\n" +
                                offendingTomcatFiles.collect { "  * ${it.absolutePath - destDir.absolutePath}" }.join("\n"))
            }
            else {
                logger.info "[workspace-extra] All good, only '${tomcatDirNameMatchingBundle}' found as expected."
            }
        }
    }

    bundleProducingTask.configure {
        finalizedBy checkBundleTask
    }
}


// Print the effective versions of various pieces
// There is no "gradle.liferayWorkspace.modules" (consistently), so use the project property and known default value if not found
project.afterEvaluate {
    logger.quiet """\
Final build settings: 
    Gradle version:             ${gradle.gradleVersion} 
    JDK version:                ${JavaVersion.current()} 
    
    rootProject.version:        ${rootProject.version}  
    
    gradle.liferayWorkspace:
        targetPlatformVersion:  ${gradle.liferayWorkspace.targetPlatformVersion}
        bundleUrl:              ${gradle.liferayWorkspace.bundleUrl}
        dockerImageLiferay:     ${gradle.liferayWorkspace.dockerImageLiferay}
        appServerTomcatVersion: ${gradle.liferayWorkspace.properties['appServerTomcatVersion']}
        
        configsDir:             [rootProject]/${rootProject.relativePath(gradle.liferayWorkspace.configsDir)}
        homeDir (initBundle):   [rootProject]/${rootProject.relativePath(gradle.liferayWorkspace.homeDir)}
        modulesDir:             ${findProperty('liferay.workspace.modules.dir') ?: "modules"}
""".readLines().collect { "[workspace-extra] ${it}"}.join(System.lineSeparator())
}